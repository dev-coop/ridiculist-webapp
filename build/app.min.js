'use strict';

angular.module('App', [
  // ng deps
  'ngRoute',

  // vendor deps
  'firebase',
  'ngClipboard',
  'LocalStorageModule',

  // app deps
  'App.itemList',
])

  .config(["ngClipProvider", function(ngClipProvider) {
    ngClipProvider.setPath('/bower_components/zeroclipboard/dist/ZeroClipboard.swf');
  }])

  .config(["localStorageServiceProvider", function(localStorageServiceProvider) {
    localStorageServiceProvider
      .setPrefix('ridiculist')
      .setStorageType('localStorage')
      .setNotify(true, true)
  }])

  .config(["$routeProvider", "$locationProvider", function($routeProvider, $locationProvider) {
    $routeProvider.otherwise({redirectTo: '/'});
    $locationProvider.html5Mode(true).hashPrefix('!');
  }]);

'use strict';

angular.module('App.itemList', []);

'use strict';

angular.module('App.session', []);

'use strict';

var FIREBASE = {};

FIREBASE.root = 'https://ridiculist.firebaseio.com/';
FIREBASE.lists = FIREBASE.root + 'lists';
FIREBASE.items = FIREBASE.root + 'items';

var LIST_ICONS = {
    todo: 'ion-android-checkbox-outline',
    vote: 'ion-android-star-outline',
    survey: 'ion-android-radio-button-off'
};

var LIST_TYPES = {
    todo: 'todo',
    vote: 'vote',
    survey: 'survey'
};

var LIST_SECURITY = {
    public: 'public',
    link: 'link',
};

angular.module('App.itemList')
    .constant('FIREBASE', FIREBASE)
    .constant('LIST_ICONS', LIST_ICONS)
    .constant('LIST_TYPES', LIST_TYPES)
    .constant('LIST_SECURITY', LIST_SECURITY)
;

var ItemFactory = function(FIREBASE, LIST_TYPES, $firebaseObject, localStorageService) {
  var ref = new Firebase(FIREBASE.items);

  var defaultItem = {
    listId: '',
    name: '',
    sort: 0,
    type: LIST_TYPES.todo,
    value: 0,
    // this is a per user property
    // angular will scrub $ props before it is posted to firebase
    $isSelected: false
  };

  var FirebaseItem = $firebaseObject.$extend({
    $$defaults: defaultItem,
    // each time an update arrives from the server, apply the change locally
    $$updated: function(snap) {
      // apply the changes using the super method
      var changed = $firebaseObject.prototype.$$updated.apply(this, arguments);

      // todo items share their selected state for all users
      // update selected state
      // we want to update the selected state
      this.updateIsSelected();

      // return whether or not changes occurred
      return changed;
    },
    isType: function(type) {
      return this.type === type;
    },
    updateIsSelected: function() {
      var isTodo = this.isType(LIST_TYPES.todo);
      var isInStorage = localStorageService.get(this.$id);
      this.$isSelected = isTodo ? this.value : isInStorage;
    },
    setSelected: function() {
      // todo items have global state for all users
      // don't store the selected state
      if (this.isType(LIST_TYPES.todo)) return;
      localStorageService.set(this.$id, true);
      this.$isSelected = true;
    },
    removeSelected: function() {
      // todo items have global state for all users
      // don't store the selected state
      if (this.isType(LIST_TYPES.todo)) return;
      localStorageService.remove(this.$id);
      this.$isSelected = false;
    },
    increment: function() {
      var self = this;
      self.value += 1;
      self.setSelected();
      self.$save().catch(function(err) {
        // roll back on failed save
        self.value -= 1;
        self.removeSelected();
        console.error(err);
      });
    },
    decrement: function() {
      var self = this;
      self.value -= 1;
      self.removeSelected();
      self.$save().catch(function(err) {
        // roll back on failed save
        self.value += 1;
        self.setSelected();
        console.error(err);
      });
    },
    toggle: function() {
      this.$isSelected ? this.decrement() : this.increment();
    }
  });

  return function Item(id) {
    return id ? new FirebaseItem(ref.child(id)) : angular.copy(defaultItem);
  };
};
ItemFactory.$inject = ["FIREBASE", "LIST_TYPES", "$firebaseObject", "localStorageService"];

angular.module('App.itemList')
  .factory('ItemFactory', ItemFactory)
;

var ItemListFactory = function($q, ItemFactory, ListFactory, LIST_TYPES, LIST_SECURITY, $firebaseArray, localStorageService) {
  var itemsRef = new Firebase(FIREBASE.items);
  var listsRef = new Firebase(FIREBASE.lists);
  var items = $firebaseArray(itemsRef);
  var lists = $firebaseArray(listsRef);

  /**
   * An a `list` of `items`.
   * @param {string} [itemList]
   * @param {ItemFactory[]} [itemList.items]
   * @param {ListFactory} [itemList.list]
   * @constructor
   */
  function ItemList(itemList) {
    itemList = itemList || {};

    // defaults
    this.items = [];
    this.list = new ListFactory();
    this.isValid = false;
    this.isEditMode = true;

    angular.extend(this, itemList);
  }

  ItemList.getByListId = function(id) {
    var itemQuery = itemsRef.orderByChild('listId').equalTo(id);
    var itemList = new ItemList();
    itemList.list = new ListFactory(id);

    $firebaseArray(itemQuery).$loaded().then(function(remoteItems) {
      angular.forEach(remoteItems, function(item) {
        itemList.items.push(new ItemFactory(item.$id));
      });
    });

    itemList.isAuthor = itemList.getAuthor();
    itemList.isEditMode = false;
    return itemList;
  };

  ItemList.prototype.getLink = function() {
    return this.list.getLink();
  };

  ItemList.prototype.setType = function(type) {
    var newType = LIST_TYPES[type];
    if (!newType) {
      throw new Error('ItemList.setType(type) `type` must be a LIST_TYPE, not: "' + type + '"')
    }

    this.list.type = newType;
    angular.forEach(this.items, function(item) {
      item.type = newType;
    });
  };

  ItemList.prototype.validate = function() {
    var hasTitle = !!this.list.title.trim();
    var hasItems = this.items.filter(function(item) {
      return angular.isString(item.name) ? !!item.name.trim() : false;
    }).length;

    this.isValid = hasTitle && hasItems;
  };

  ItemList.prototype.setAuthor = function() {
    if (this.list.$id) {
      localStorageService.set(this.list.$id, true);
    }
  };

  ItemList.prototype.getAuthor = function() {
    var isAuthor = localStorageService.get(this.list.$id);
    console.log('getAuthor', isAuthor);
    return isAuthor;
  };

  ItemList.prototype.create = function() {
    var deferred = $q.defer();
    var self = this;

    if (!self.isValid) {
      deferred.reject('ItemList is not valid, cannot create()');
    } else {
      // save list then add items with listId
      lists.$add(self.list).then(function(savedList) {
        var listId = savedList.key();
        // add saved list back to itemList
        self.list = new ListFactory(listId);

        // record this user's browser as the author
        self.setAuthor();

        angular.forEach(self.items, function(item, i) {
          // skip blank items
          if (!item.name) return;

          // record listId on item
          item.listId = self.list.$id;
          items.$add(item).then(function(savedItem) {
            // add saved item back to itemList
            self.items[i] = savedItem;
          });
        });

        deferred.resolve(self);
      });
    }

    return deferred.promise;
  };
  
  ItemList.prototype.destroy = function() {
    this.list.$remove();
    angular.forEach(this.items, function(item) {
      item.$remove();
    });
  };

  //
  // Items
  //
  ItemList.prototype.addItem = function() {
    var newItem = new ItemFactory();
    newItem.type = this.list.type;
    this.items.push(newItem);
  };

  ItemList.prototype.toggleItem = function(index) {
    var item = this.items[index];
    // don't toggle items on lists in edit mode
    if (this.isEditMode) return;

    // if survey item was clicked
    // deselect the current item
    if (item.isType(LIST_TYPES.survey)) {
      var currentItem = this.items.filter(function(itm) {
        return itm.$isSelected;
      })[0];

      if (currentItem) currentItem.toggle();
    }

    // select the new item
    item.toggle();
  };

  return ItemList;
};
ItemListFactory.$inject = ["$q", "ItemFactory", "ListFactory", "LIST_TYPES", "LIST_SECURITY", "$firebaseArray", "localStorageService"];

angular.module('App.itemList')
  .factory('ItemListFactory', ItemListFactory)
;

var ListFactory = function(FIREBASE, $firebaseObject, LIST_TYPES) {
  var ref = new Firebase(FIREBASE.lists);

  var defaultList = {
    title: '',
    security: LIST_SECURITY.public,
    type: LIST_TYPES.todo,
    toggleSecurity: function() {
      var isPublic = this.hasSecurity(LIST_SECURITY.public);
      this.security = isPublic ? LIST_SECURITY.link : LIST_SECURITY.public;
    },
    isType: function(type) {
      return this.type === type;
    },
    hasSecurity: function(type) {
      return this.security === type;
    }
  };

  var FirebaseList = $firebaseObject.$extend({
    $$defaults: defaultList,
    getLink: function() {
      return this.$id ? 'www.ridiculi.st/' + this.$id : null;
    }
  });

  function List(id) {
    return id ? new FirebaseList(ref.child(id)) : angular.copy(defaultList);
  }

  return List;
};
ListFactory.$inject = ["FIREBASE", "$firebaseObject", "LIST_TYPES"];

angular.module('App.itemList')
  .factory('ListFactory', ListFactory)
;

'use strict';

var SessionFactory = function () {
    var factory = {};
    
    
    
    return factory;
};


angular.module('App.session')
    .factory('SessionFactory', SessionFactory)
;

'use strict';

function list($routeParams, $timeout, $location, ItemListFactory, LIST_TYPES, $interval) {
  return {
    restrict: 'E',
    replace: true,
    scope: {},
    templateUrl: 'app/components/item-list/item-list.html',
    link: function(scope, elem, attrs) {
      var listId = $routeParams.id;

      scope.init = function() {
        scope.LIST_TYPES = LIST_TYPES;

        if (listId) {
          scope.itemList = ItemListFactory.getByListId(listId);
        } else {
          scope.itemList = new ItemListFactory();
          scope.addItem();
        }

        $interval(function() {
          scope.itemList.validate();
        }, 200);
      };

      //
      // Items
      //
      scope.addItem = function() {
        scope.itemList.addItem();
      };

      scope.focusItem = function(index) {
        var focusInput = document.getElementsByClassName('lst-list-item-input')[index];
        if (focusInput) {
          focusInput.focus();
        }
      };

      scope.onItemChange = function() {
        var totalBlank = 0;

        scope.itemList.items.forEach(function(item, i, arr) {
          var isBlank = item.name.trim().length === 0;
          var isLast = i === arr.length - 1;

          totalBlank += isBlank ? 1 : 0;

          // remove spare empty items
          if (isBlank && !isLast) {
            scope.focusItem(i);
            arr.splice(i, 1);
          }
        });

        if (totalBlank === 0) {
          scope.addItem();
        }
      };

      scope.toggleItem = function(index) {
        if (!scope.isReadOnly) {
          scope.itemList.toggleItem(index);
        }
      };

      //
      // Item List
      //

      scope.setListType = function(type) {
        scope.itemList.setType(type);
      };

      scope.toggleFeatured = function() {
        scope.itemList.list.toggleSecurity();
      };

      scope.create = function() {
        scope.itemList.create().then(function(itemList) {
          scope.itemList = itemList;
          $location.path(itemList.list.$id);
        });
      };

      scope.destroy = function() {
        scope.itemList.destroy();
        $location.path('/');
      };

      //
      // Get Link
      //

      scope.getLink = function() {
        return scope.itemList.getLink();
      };

      scope.onCopy = function() {
        scope.linkCopied = true;

        $timeout(function() {
          scope.linkCopied = false;
        }, 1000);
      };

      //
      // Bindings
      //

      scope.handleEnterKey = function(e, itemIndex) {
        var offset;

        if (e.metaKey) {
          scope.create();
        } else {
          offset = e.shiftKey ? -1 : 1;
          scope.focusItem(itemIndex + offset);
        }
      };

      scope.onKeydown = function(e, itemIndex) {
        switch (e.keyCode) {
          // Enter
          case 13:
            scope.handleEnterKey(e, itemIndex);
            break;
        }
      };

      scope.init();
    }
  }
}
list.$inject = ["$routeParams", "$timeout", "$location", "ItemListFactory", "LIST_TYPES", "$interval"];

angular.module('App.itemList')
  .directive('list', list);

'use strict';

angular.module('App')

  .config(["$routeProvider", function($routeProvider) {
    $routeProvider
      .when('/:id', {
        templateUrl: '/app/views/home/home.html',
        controller: 'Controller'
      })
      .when('/', {
        templateUrl: '/app/views/home/home.html',
        controller: 'Controller'
      });
  }])

  .controller('Controller', ["$scope", "FIREBASE", "$firebaseObject", "$routeParams", "LIST_ICONS", "LIST_SECURITY", function($scope, FIREBASE, $firebaseObject, $routeParams, LIST_ICONS, LIST_SECURITY) {
    var publicListsRef = new Firebase(FIREBASE.lists)
      .orderByChild('security')
      .equalTo(LIST_SECURITY.public);
    $scope.lists = $firebaseObject(publicListsRef);
    $scope.LIST_ICONS = LIST_ICONS;

    $scope.idUrlParam = $routeParams.id;
  }]);
