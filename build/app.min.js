'use strict';

angular.module('App', [
  // ng deps
  'ngRoute',

  // vendor deps
  'firebase',
  'ngClipboard',
  'LocalStorageModule',

  // app deps
  'App.itemList',
])

  .config(["ngClipProvider", function(ngClipProvider) {
    ngClipProvider.setPath('/bower_components/zeroclipboard/dist/ZeroClipboard.swf');
  }])

  .config(["localStorageServiceProvider", function(localStorageServiceProvider) {
    localStorageServiceProvider
      .setPrefix('ridiculist')
      .setStorageType('sessionStorage')
      .setNotify(true, true)
  }])

  .config(["$routeProvider", "$locationProvider", function($routeProvider, $locationProvider) {
    $routeProvider.otherwise({redirectTo: '/'});
    $locationProvider.html5Mode(true).hashPrefix('!');
  }]);

'use strict';

angular.module('App.session', []);

'use strict';

angular.module('App.itemList', []);

'use strict';

var FIREBASE = {};

FIREBASE.root = 'https://ridiculist.firebaseio.com/';
FIREBASE.lists = FIREBASE.root + 'lists';
FIREBASE.items = FIREBASE.root + 'items';

var LIST_ICONS = {
    todo: 'ion-android-checkbox-outline',
    vote: 'ion-android-star-outline',
    survey: 'ion-android-radio-button-off'
};

var LIST_TYPES = {
    todo: 'todo',
    vote: 'vote',
    survey: 'survey'
};

var LIST_SECURITY = {
    public: 'public',
    link: 'link',
};

angular.module('App.itemList')
    .constant('FIREBASE', FIREBASE)
    .constant('LIST_ICONS', LIST_ICONS)
    .constant('LIST_TYPES', LIST_TYPES)
    .constant('LIST_SECURITY', LIST_SECURITY)
;

'use strict';

var SessionFactory = function () {
    var factory = {};
    
    
    
    return factory;
};


angular.module('App.session')
    .factory('SessionFactory', SessionFactory)
;

var ItemFactory = function(FIREBASE, LIST_TYPES, $firebaseObject) {
  var ref = new Firebase(FIREBASE.items);
  
  var defaultItem = {
    listId: '',
    name: '',
    sort: 0,
    type: LIST_TYPES.todo,
    value: 0
  };

  var FirebaseItem = $firebaseObject.$extend({
    $$defaults: defaultItem,
    setValue: function(val) {
      this.value = val;
      this.$save();
      return this;
    },
    increment: function() {
      this.value += 1;
      this.$save();
      return this;
    },
    decrement: function() {
      this.value -= 1;
      this.$save();
      return this;
    },
    toggle: function() {
      switch (this.type) {
        case LIST_TYPES.todo:
          this.toggleBoolean();
          break;
        case LIST_TYPES.vote:
          this.toggleSum();
          break;
        case LIST_TYPES.survey:
          this.toggleSum();
          break;
      }
      return this;
    },
    toggleBoolean: function() {
      this.value === 0 ? this.setValue(1) : this.setValue(0);
      return this;
    }
    ,
    toggleSum: function() {
      this.value === 0 ? this.increment() : this.decrement();
      return this;
    }
  });

  return function Item(id) {
    return id ? new FirebaseItem(ref.child(id)) : angular.copy(defaultItem);
  };
};
ItemFactory.$inject = ["FIREBASE", "LIST_TYPES", "$firebaseObject"];

angular.module('App.itemList')
  .factory('ItemFactory', ItemFactory)
;

///////////////////////////////////////////////////////////////////////////////

//Item.prototype.add = function() {
//  var deferred = $q.defer();
//  var itemObj;
//  var self = this;
//
//  if (!self.listId) {
//    throw new Error('Item.save() requires a `listId` property to save.')
//  }
//
//  items.$add(self)
//    .then(function(ref) {
//      var itemId = ref.key();
//      var itemRef = new Firebase(FIREBASE.items).child(itemId);
//      itemObj = $firebaseObject(itemRef);
//
//      return itemObj.$loaded()
//    })
//
//    .then(function(itemObj) {
//      console.log('itemObj', itemObj);
//      var newItem = new Item(itemObj);
//      console.log('newItem', newItem);
//      deferred.resolve(newItem);
//
//      // To make the data available in the DOM, assign it to $scope
//      //$scope.data = obj;
//
//      // For three-way data bindings, bind it to the scope instead
//      //obj.$bindTo($scope, "data");
//    });
//
//  return deferred.promise;
//};

var ItemListFactory = function($q, ItemFactory, ListFactory, LIST_TYPES, LIST_SECURITY, $firebaseArray) {
  var itemsRef = new Firebase(FIREBASE.items);
  var listsRef = new Firebase(FIREBASE.lists);
  var items = $firebaseArray(itemsRef);
  var lists = $firebaseArray(listsRef);

  /**
   * An a `list` of `items`.
   * @param {string} [itemList]
   * @param {ItemFactory[]} [itemList.items]
   * @param {ListFactory} [itemList.list]
   * @constructor
   */
  function ItemList(itemList) {
    itemList = itemList || {};

    // defaults
    this.items = [];
    this.list = new ListFactory();

    angular.extend(this, itemList);
  }

  ItemList.getByListId = function(id) {
    var itemQuery = itemsRef.orderByChild('listId').equalTo(id);
    var itemList = new ItemList();
    itemList.list = new ListFactory(id);

    $firebaseArray(itemQuery).$loaded().then(function(remoteItems) {
      angular.forEach(remoteItems, function(item) {
        itemList.items.push(new ItemFactory(item.$id));
      });
    });

    return itemList;
  };

  ItemList.prototype.getLink = function() {
    return this.list.getLink();
  };

  ItemList.prototype.setType = function(type) {
    var newType = LIST_TYPES[type];
    if (!newType) {
      throw new Error('ItemList.setType(type) `type` must be a LIST_TYPE, not: "' + type + '"')
    }

    this.list.type = newType;
    angular.forEach(this.items, function(item) {
      item.type = newType;
    });
  };

  ItemList.prototype.create = function() {
    var deferred = $q.defer();
    var self = this;

    // save list then
    lists.$add(self.list).then(function(savedList) {
      var listId = savedList.key();
      self.list = new ListFactory(listId);

      angular.forEach(self.items, function(item, i) {
        // skip blank items
        if (!item.name) return;
        item.listId = self.list.$id;
        console.log(item);
        items.$add(item).then(function(savedItem) {
          // add saved item back to itemList
          self.items[i] = savedItem;
        });
      });

      deferred.resolve(self);
    });

    return deferred.promise;
  };

  //
  // Items
  //
  ItemList.prototype.addItem = function() {
    var newItem = new ItemFactory();
    newItem.type = this.list.type;
    this.items.push(newItem);
    return this;
  };

  ItemList.prototype.toggleItem = function(index) {
    var self = this;
    var isSurvey = self.list.type === LIST_TYPES.survey;

    if (!isSurvey) {
      self.items[index].toggle();
    } else {
      // deselect all other items first
      angular.forEach(self.items, function(item, i) {
        if (i !== index) {
          item.setValue(0);
        }
      });

      // select the item
      self.items[index].setValue(1);
    }

    return this;
  };

  return ItemList;
};
ItemListFactory.$inject = ["$q", "ItemFactory", "ListFactory", "LIST_TYPES", "LIST_SECURITY", "$firebaseArray"];

angular.module('App.itemList')
  .factory('ItemListFactory', ItemListFactory)
;

var ListFactory = function(FIREBASE, $firebaseObject, LIST_TYPES) {
  var ref = new Firebase(FIREBASE.lists);

  var defaultList = {
    title: '',
    security: LIST_SECURITY.public,
    type: LIST_TYPES.todo
  };

  var FirebaseList = $firebaseObject.$extend({
    $$defaults: defaultList,
    getLink: function() {
      return this.$id ? 'www.ridiculi.st/' + this.$id : null;
    }
  });

  function List(id) {
    return id ? new FirebaseList(ref.child(id)) : angular.copy(defaultList);
  }

  List.toggleSecurity = function(list) {
    var isPublic = list.security === 'public';
    list.security = isPublic ? 'link' : 'public';
  };

  return List;
};
ListFactory.$inject = ["FIREBASE", "$firebaseObject", "LIST_TYPES"];

angular.module('App.itemList')
  .factory('ListFactory', ListFactory)
;

///////////////////////////////////////////////////////////////////////////////
//List.prototype.add = function() {
//  return lists.$add(this)
//    .then(function(ref) {
//      var savedRecord = lists.$getRecord(ref.key());
//      return new List(savedRecord);
//    });
//};

'use strict';

function list($routeParams, $timeout, $location, ItemListFactory, LIST_TYPES) {
  return {
    restrict: 'E',
    replace: true,
    scope: {},
    templateUrl: 'app/components/item-list/item-list.html',
    link: function(scope, elem, attrs) {
      var listId = $routeParams.id;

      scope.init = function() {
        scope.LIST_TYPES = LIST_TYPES;
        scope.isNew = !listId;

        if (scope.isNew) {
          scope.itemList = new ItemListFactory();
          scope.addItem();
        } else {
          scope.itemList = ItemListFactory.getByListId(listId);
        }
      };

      //
      // Items
      //
      scope.addItem = function() {
        scope.itemList.addItem();
      };

      scope.focusItem = function(index) {
        var focusInput = document.getElementsByClassName('lst-list-item-input')[index];
        if (focusInput) {
          focusInput.focus();
        }
      };

      scope.onItemChange = function() {
        var totalBlank = 0;

        scope.itemList.items.forEach(function(item, i, arr) {
          var isBlank = item.name.trim().length === 0;
          var isLast = i === arr.length - 1;

          totalBlank += isBlank ? 1 : 0;

          // remove spare empty items
          if (isBlank && !isLast) {
            scope.focusItem(i);
            arr.splice(i, 1);
          }
        });

        if (totalBlank === 0) {
          scope.addItem();
        }
      };

      scope.onItemClick = function(index) {
        // only handle click on saved lists, not new lists
        if (!scope.isNew) {
          scope.itemList.toggleItem(index);
        }
      };

      //
      // Item List
      //

      scope.setListType = function(type) {
        scope.itemList.setType(type);
      };

      scope.toggleFeatured = function() {
        ListFactory.toggleSecurity(list);
      };

      scope.create = function() {
        scope.itemList.create().then(function(itemList) {
          scope.itemList = itemList;
          $location.path(itemList.list.$id);
        });
      };

      //
      // Get Link
      //

      scope.getLink = function() {
        console.log('itemList directive getLink()', scope.itemList);
        return scope.itemList.getLink();
      };

      scope.onCopy = function() {
        scope.linkCopied = true;

        $timeout(function() {
          scope.linkCopied = false;
        }, 1000);
      };

      //
      // Bindings
      //

      scope.handleEnterKey = function(e, itemIndex) {
        var offset;

        if (e.metaKey) {
          scope.create();
        } else {
          offset = e.shiftKey ? -1 : 1;
          scope.focusItem(itemIndex + offset);
        }
      };

      scope.onKeydown = function(e, itemIndex) {
        switch (e.keyCode) {
          // Enter
          case 13:
            scope.handleEnterKey(e, itemIndex);
            break;
        }
      };

      scope.init();
    }
  }
}
list.$inject = ["$routeParams", "$timeout", "$location", "ItemListFactory", "LIST_TYPES"];

angular.module('App.itemList')
  .directive('list', list);

'use strict';

angular.module('App')

  .config(["$routeProvider", function($routeProvider) {
    $routeProvider
      .when('/:id', {
        templateUrl: '/app/views/home/home.html',
        controller: 'Controller'
      })
      .when('/', {
        templateUrl: '/app/views/home/home.html',
        controller: 'Controller'
      });
  }])

  .controller('Controller', ["$scope", "FIREBASE", "$firebaseArray", "$routeParams", "LIST_ICONS", "$window", "$timeout", function($scope, FIREBASE, $firebaseArray, $routeParams, LIST_ICONS, $window, $timeout) {
    var publicListsRef = new Firebase(FIREBASE.lists);
    $scope.lists = $firebaseArray(publicListsRef);
    $scope.LIST_ICONS = LIST_ICONS;


    // allow setting ninja = true in the console to show the app
    (function amIANinjaYet() {
      $timeout(function() {
        $scope.ninja = $window.ninja;
        if (!$scope.ninja) amIANinjaYet();
      }, 100);
    }());

    $scope.idUrlParam = $routeParams.id;
  }]);
